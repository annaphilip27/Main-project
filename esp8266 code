#include <ESP8266WiFi.h>  // ESP8266 WiFi library
#include <ESP8266HTTPClient.h>  // For HTTP Client functionality
#include <I2S.h>  // I2S library for ESP8266

// WiFi credentials
const char* ssid = "unni";      // Replace with your WiFi SSID
const char* password = "unni@2002";  // Replace with your WiFi password

void setup() {
  Serial.begin(115200);
  
  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // I2S setup for ESP8266
  I2S.begin(I2S_PHILIPS_MODE, 44100, 16);  // Initialize I2S (Mode, Sample Rate, Bits per Sample)

  // Set the I2S pins manually
  I2S.setPins(14, 12, 13);  // Clock Pin (SCK), Word Select Pin (WS), Data Out Pin (SD)
}

void streamAudioFromURL(const char* url) {
  WiFiClient client;
  if (client.connect(url, 80)) {
    Serial.println("Connected to server");

    // Send HTTP GET request to fetch the audio file (replace this with your URL)
    client.print("GET /audio.wav HTTP/1.1\r\n");
    client.print("Host: example.com\r\n");  // Replace with your server's host
    client.print("Connection: close\r\n\r\n");

    // Buffer to hold audio data
    byte buffer[1024];
    size_t bytesRead;

    while (client.connected()) {
      bytesRead = client.read(buffer, sizeof(buffer));
      if (bytesRead > 0) {
        // Write the audio data to the I2S output
        I2S.write(buffer, bytesRead);  // Write data to I2S output
      }
    }

    client.stop();
    Serial.println("Disconnected from server");
  } else {
    Serial.println("Failed to connect to server");
  }
}

void loop() {
  // Call the stream audio function with an example URL
  streamAudioFromURL("example.com");  // Replace with your server's URL

  delay(10000); // Wait for a while before repeating
}
